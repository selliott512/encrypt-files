#!/bin/bash

# encrypt-files ver 0.1
#   by Steven Elliott <selliott512@gmail.com>
#   https://github.com/selliott512/encrypt-files.git
#
# A cron job wrapper for encrypt-files that sends the encrypted files to a
# remote system.

# Semi-strict mode.

set -eo pipefail
# For bash 4.3 and earlier empty arrays fail with "set -u".
if [[ $(( 10*BASH_VERSINFO[0] + BASH_VERSINFO[1] )) -ge 44 ]]
then
    set -u
fi

# Globals

bname="${0##*/}"

files_file="/etc/$bname-files.conf"

# Extra arguments for encrypt-files.
efs_extra_args_ar=()

# Extra arguments for rsync.
rsync_extra_args_ar=()

# Configuration file name, required and optional keys.
conf_file="/etc/$bname.conf"
conf_req_ar=(localDir remoteDir user host sshKey)
conf_opt_ar=()

# Command line options.
opt_getopts="dhkruv"

# Functions

# Read the configuration file $conf_file.
function conf_read()
{
    if [[ ! -r $conf_file ]]
    then
        echo "Configuration file \"$conf_file\" either does not exist, or is \
not readable." 1>&2
        exit 1
    fi

    # Convert the required and and optional keys to associative arrays, which
    # are like sets.

    unset req_as
    declare -A req_as
    for key in "${conf_req_ar[@]}"
    do
        req_as[$key]=t
    done

    unset opt_as
    declare -A opt_as
    for key in "${conf_opt_ar[@]}"
    do
        opt_as[$key]=t
    done

    # The global associative array produced by this function.
    unset conf
    declare -gA conf

    # Read the configuration file.
    while read -r line
    do
        key="${line%%=*}"
        key="${key#"${key%%[![:space:]]*}"}" # Leading whitespace.
        key="${key%"${key##*[![:space:]]}"}" # Trailing whitespace   
        if [[ (-z $key) || ($key == \#*) ]]
        then
            # A comment or blank line.
            continue
        fi
        # Allow for camel case keys, such as "myKey" or underscore such as
        # "my_key".
        key_forbidden=$(tr -d "0-9A-Z_a-z" <<< "$key")
        if [[ -n $key_forbidden ]]
        then
            echo "Key \"$key\" in configuration file \"$conf_file\" contains \
forbidden characters \"$key_forbidden\"." 1>&2
            exit 1
        fi

        value="${line#*=}"
        value="${value#"${value%%[![:space:]]*}"}" # Leading whitespace.
        value="${value%"${value##*[![:space:]]}"}" # Trailing whitespace.

        if [[ (! -v req_as[$key]) && (! -v opt_as[$key]) ]]
        then
            echo "Key \"$key\" in configuration file \"$conf_file\" is not \
allowed." 1>&2
            exit 1
        fi
        conf[$key]="$value"
    done < "$conf_file"
    
    # Determine the required keys that are missing.
    missing_ar=()
    for key in "${!req_as[@]}"
    do
        if [[ ! -v conf[$key] ]]
        then
            missing_ar+=("$key")
        fi
    done
    if [[ ${#missing_ar[@]} -gt 0 ]]
    then
        echo "Configuration file \"$conf_file\" is missing required keys: \
${missing_ar[*]}" 1>&2
        exit 1
    fi

    # Read-only. -g is needed even though it's already global.
    declare -gr conf
}

# Parse command line options.
function opt_parse()
{
    if [[ $opt_getopts == :* ]]
    then
        echo "\$opt_getots=\"$opt_getopts\" should not start with \":\"." 1>&2
        exit 1
    fi

    if [[ $opt_getopts == *::* ]]
    then
        echo "\$opt_getots=\"$opt_getopts\" should not have more than one \
\":\" in a row." 1>&2
        exit 1
    fi

    # The global option array.
    unset opt
    declare -gA opt

    # Make sure all possible options are set so $opt can be referenced.
    for (( i=0; i<${#opt_getopts}; i++ ))
    do
        o="${opt_getopts:$i:1}"
        if [[ $o == : ]]
        then
            continue
        fi
        opt["$o"]=""
    done

    while getopts "$opt_getopts" o
    do
        if [[ $o == "?" ]]
        then
            # An option that's not in $opt_getopts.
            exec 1>&2
            usage
            exit 1
        else
            if [[ -v OPTARG ]]
            then
                opt["$o"]="$OPTARG"
            else
                opt["$o"]=t
            fi
        fi
    done

    if [[ -n ${opt[h]} ]]
    then
        # Here since it probably applies to any command line options.
        usage
        exit 0
    fi

    # Read-only. -g is needed even though it's already global.
    declare -gr opt
}

function usage()
{
    echo "Usage: $bname [-v]"
    echo "    -v   Verbose."
}

# Main entry

# Read the config file.
conf_read

# Parse command line options.
opt_parse "$@"

if [[ -n ${opt[v]} ]]
then
    efs_extra_args_ar+=("-v")
    echo "efs @$files_file -> ${conf[localDir]}"
fi
if ! encrypt-files -u "${efs_extra_args_ar[@]}" "@$files_file" \
        "${conf[localDir]}"
then
    echo "Call to encrypt-files failed." 1>&2
    exit 1
fi

# The remote directory with the current host added to it.
remote_dir_host=${conf[remoteDir]}/"$HOSTNAME"

if [[ -n ${opt[v]} ]]
then
    rsync_extra_args_ar+=("-v")
    echo "rsn ${conf[localDir]} -> $remote_dir_host"
fi
    # mkdir is properly escaped.
    # shellcheck disable=SC2029
    ssh -i "${conf[sshKey]}" "${conf[user]}@${conf[host]}" \
        "mkdir -p \"$remote_dir_host\""
    rsync -a --delete -e "ssh -i ${conf[sshKey]}" "${rsync_extra_args_ar[@]}" \
        "${conf[localDir]}/" "${conf[user]}@${conf[host]}:$remote_dir_host"
