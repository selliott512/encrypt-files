#!/bin/bash

# A cron job wrapper for encrypt-files that sends the encrypted files to a
# remote system.

# Semi-strict mode.

set -eo pipefail
# For bash 4.3 and earlier empty arrays fail with "set -u".
if [[ $(( 10*${BASH_VERSINFO[0]} + ${BASH_VERSINFO[1]} )) -ge 44 ]]
then
    set -u
fi
IFS=$' \t\n'

# Globals

bname="${0##*/}"

conf_file="/etc/$bname.conf"
files_file="/etc/$banme-files.conf"

# Extra arguments for encrypt-files.
efs_extra_args=""

# Required and optional configuration parameters.
config_req_ar=(localDir remoteDir user host sshKey)
config_opt_ar=()

# Functions

function config_read()
{
    if [[ ! -r $conf_file ]]
    then
        echo "Configuration file \"$conf_file\" either does not exist, or is \
not readable." 1>&2
        exit 1
    fi

    # Convert the required and and optional keys to associative arrays, which
    # are like sets.

    unset req_as
    declare -A req_as
    for key in "${config_req_ar[@]}"
    do
        req_as[$key]=t
    done

    unset opt_as
    declare -A opt_as
    for key in "${config_opt_ar[@]}"
    do
        opt_as[$key]=t
    done

    # The global associative array produced by this function.
    unset conf
    declare -gA conf

    # Read the config file.
    while read line
    do
        key="${line%%=*}"
        key="${key#"${key%%[![:space:]]*}"}" # Leading whitespace.
        key="${key%"${key##*[![:space:]]}"}" # Trailing whitespace   
        if [[ (-z $key) || ($key == \#*) ]]
        then
            # A comment or blank line.
            continue
        fi
        key=$(tr -dc "[0-9A-Za-z]" <<< "$key")

        value="${line#*=}"
        value="${value#"${value%%[![:space:]]*}"}" # Leading whitespace.
        value="${value%"${value##*[![:space:]]}"}" # Trailing whitespace.

        if [[ (-z ${req_as[$key]}) && (-z ${opt_as[$key]}) ]]
        then
            echo "Key \"$key\" in configuration file \"$conf_file\" is not \
allowed." 1>&2
            exit 1
        fi
        conf[$key]="$value"
    done < "$conf_file"
    
    # Determine the required keys that are missing.
    missing_ar=()
    for key in "${!req_as[@]}"
    do
        if [[ -z ${conf[$key]} ]]
        then
            missing_ar+=($key)
        fi
    done
    if [[ -n $missing_ar ]]
    then
        echo "Configuration file \"$conf_file\" is missing required keys: \
${missing_ar[@]}" 1>&2
        exit 1
    fi
}

function usage()
{
    echo "Usage: $bname [-v]" 1>&2
    echo "    -v   Verbose." 1>&2
}

# Main entry

if [[ $# -lt 1 ]]
then
    usage
    exit 1
fi

# Parse command line options.

opt_verbose=""
while getopts "v" opt
do
    case $opt in
        v)
            opt_verbose=t
        ;;
        ?)
            exec 1>&2
            usage
            exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

# Read the config file.
config_read

# Incremented for each error found.
errors=0

if [[ -n $opt_verbose ]]
then
    efs_extra_args="$efs_extra_args -v"
    echo "efs @$files_file -> ${conf[localDir]}"
fi
if ! encrypt-files -u $efs_extra_args @"$files_file" "${conf[localDir]}"
then
    echo "Could not encrypt-files" 1>&2
    exit 1
fi

if [[ -n $opt_verbose ]]
then
    rsync_extra_args="$rsync_extra_args -v"
    echo "rsn ${conf[localDir]} -> ${conf[remoetDir]}"
fi
rsync -a $rsync_extra_args "${conf[localDir]}" \
    ${conf[user]}@${conf[host]}:${conf[remoteDir]}

