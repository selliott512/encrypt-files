#!/bin/bash

# encrypt-files ver 0.2
#   by Steven Elliott <selliott512@gmail.com>
#   https://github.com/selliott512/encrypt-files.git
#
# Encrypt files one at time using a combination of a secret password and the
# file's relative path as the password. Requires the "openssl" CLI.
#

# Semi-strict mode.

set -eo pipefail
# For bash 4.3 and earlier empty arrays fail with "set -u".
if [[ $(( 10*BASH_VERSINFO[0] + BASH_VERSINFO[1] )) -ge 44 ]]
then
    set -u
fi

# Globals

bname="${0##*/}"
tmp_dir="/tmp/$bname.$$"

# File names of files in $tmp_dir
hash_actual_file="$tmp_dir/hash-actual"
hash_expected_file="$tmp_dir/hash-expected"
pass_file="$tmp_dir/pass"
src_list_file="$tmp_dir/src-files"
dst_list_file="$tmp_dir/dst-files"

# Configuration file name, required and optional keys.
conf_file="/etc/$bname.conf"
conf_req_ar=(pass algDefault algLow)
conf_opt_ar=(lowFiles noSalt)

# Command line options.
opt_getopts="dhkrt:uvx"

# Functions

# Delete temporary files.
function cleanup()
{
    if [[ -n ${opt[k]} ]]
    then
        if [[ -n ${opt[v]} ]]
        then
            echo "Keeping temporary directory \"$tmp_dir\"."
        fi
        return
    fi

    if [[ -d $tmp_dir ]]
    then
        if [[ -f "$pass_file" ]]
        then
            shred -u "$pass_file"
        fi
        # A bit safer than "rm -rf"
        rm -f "$tmp_dir"/*
        rmdir "$tmp_dir"
    else
        echo "Missing temporary directory \"$tmp_dir\"." 1>&2
        exit 1
    fi
}

# Read the configuration file $conf_file.
function conf_read()
{
    if [[ ! -r $conf_file ]]
    then
        echo "Configuration file \"$conf_file\" either does not exist, or is \
not readable." 1>&2
        exit 1
    fi

    # Convert the required and and optional keys to associative arrays, which
    # are like sets.

    unset req_as
    declare -A req_as
    for key in "${conf_req_ar[@]}"
    do
        req_as[$key]=t
    done

    unset opt_as
    declare -A opt_as
    for key in "${conf_opt_ar[@]}"
    do
        opt_as[$key]=t
    done

    # The global associative array produced by this function.
    unset conf
    declare -gA conf

    # Read the configuration file.
    while read -r line
    do
        key="${line%%=*}"
        key="${key#"${key%%[![:space:]]*}"}" # Leading whitespace.
        key="${key%"${key##*[![:space:]]}"}" # Trailing whitespace   
        if [[ (-z $key) || ($key == \#*) ]]
        then
            # A comment or blank line.
            continue
        fi
        # Allow for camel case keys, such as "myKey" or underscore such as
        # "my_key".
        key_forbidden=$(tr -d "0-9A-Z_a-z" <<< "$key")
        if [[ -n $key_forbidden ]]
        then
            echo "Key \"$key\" in configuration file \"$conf_file\" contains \
forbidden characters \"$key_forbidden\"." 1>&2
            exit 1
        fi

        value="${line#*=}"
        value="${value#"${value%%[![:space:]]*}"}" # Leading whitespace.
        value="${value%"${value##*[![:space:]]}"}" # Trailing whitespace.

        if [[ (! -v req_as[$key]) && (! -v opt_as[$key]) ]]
        then
            echo "Key \"$key\" in configuration file \"$conf_file\" is not \
allowed." 1>&2
            exit 1
        fi
        conf[$key]="$value"
    done < "$conf_file"
    
    # Determine the required keys that are missing.
    missing_ar=()
    for key in "${!req_as[@]}"
    do
        if [[ ! -v conf[$key] ]]
        then
            missing_ar+=("$key")
        fi
    done
    if [[ ${#missing_ar[@]} -gt 0 ]]
    then
        echo "Configuration file \"$conf_file\" is missing required keys: \
${missing_ar[*]}" 1>&2
        exit 1
    fi

    # Read-only. -g is needed even though it's already global.
    declare -gr conf
}

# Parse command line options.
function opt_parse()
{
    if [[ $opt_getopts == :* ]]
    then
        echo "\$opt_getots=\"$opt_getopts\" should not start with \":\"." 1>&2
        exit 1
    fi

    if [[ $opt_getopts == *::* ]]
    then
        echo "\$opt_getots=\"$opt_getopts\" should have more than one \":\" in \
a row." 1>&2
        exit 1
    fi

    # The global option array.
    unset opt
    declare -gA opt

    # Make sure all possible options are set so $opt can be referenced.
    for (( i=0; i<${#opt_getopts}; i++ ))
    do
        o="${opt_getopts:$i:1}"
        if [[ $o == : ]]
        then
            continue
        fi
        opt["$o"]=""
    done

    while getopts "$opt_getopts" o
    do
        if [[ $o == "?" ]]
        then
            # An option that's not in $opt_getopts.
            exec 1>&2
            usage
            exit 1
        else
            if [[ -v OPTARG ]]
            then
                opt["$o"]="$OPTARG"
            else
                opt["$o"]=t
            fi
        fi
    done

    if [[ -n ${opt[h]} ]]
    then
        # Here since it probably applies to any command line options.
        usage
        exit 0
    fi

    # Read-only. -g is needed even though it's already global.
    declare -gr opt
}

# Display a usage statement. Keep in sync with $opt_getopts.
function usage()
{
    echo "Usage: $bname [-d] [-h] [-k] [-r] [-t top-dir] [-u] [-v] [-x]\
source dest"
    echo "    -d         Decrypt instead of encrypt."
    echo "    -h         This help message."
    echo "    -k         Keep temporary files."
    echo "    -r         Relative paths (like rsync)."
    echo "    -t top-dir Use this as the top level directory when decrypting."
    echo "    -u         Only update the destination if the source is newer."
    echo "    -v         Verbose."
    echo "    -x         Delete irrelevant files and directories in the \
destination."
    echo "    src        The source directory or file. Prefix with \"@\" for \
file list."
    echo "    dst        The destination directory."
}

# Main entry

# Read the configuration file.
conf_read

if [[ ${conf[pass]} == iO0p9ivpEiG64ssEwWDfEusJB2mmHXhBMBWXYGT4c52pG ]]
then
    echo "WARNING: You MUST CHANGE the default password in \"$conf_file\" in \
order to be secure." 1>&2
fi

# Parse command line options.
opt_parse "$@"

# So that only positional arguments, if any, remain.
shift $((OPTIND - 1))

if [[ $# -lt 2 ]]
then
    exec 1>&2
    usage
    exit 1
fi

src="$1"
# Get rid of the tailing slash, if any.
if [[ $src == */ ]]
then
    src="${src:0:-1}"
fi

dst="$2"
# Get rid of the tailing slash, if any.
if [[ $dst == */ ]]
then
    dst="${dst:0:-1}"
fi

if [[ (-n ${opt[d]}) && (-n ${opt[r]}) ]]
then
    echo "Options -d and -r are not compatible." 1>&2
    exit 1
fi

if [[ -n ${opt[t]} ]]
then
    if [[ ! (${opt[t]} == /*) || (${opt[t]} == */ ) ]]
    then
        echo "Option -t (\"${opt[t]}\") must start with a \"/\", but not end \
with a \"/\"." 1>&2
        exit 1
    fi
fi

if [[ $src == @* ]]
then
    # "src" is actually a list of source files each of which is a source top.
    # In this case there is no prefix common to all source directories.
    mapfile -t src_tops_ar < "${src:1}"
    src_prefix_len=0
    if [[ -n ${opt[t]} ]]
    then
        echo "If option \"-t\" (\"${opt[t]}\") is specified then there can \
only be a single source top ." 1>&2
        exit 1
    fi
else
    # There is a single source top directory, which is a common prefix to all
    # source directories found.
    src_tops_ar=("$src")
    src_prefix_len=${#src}
    if [[ -n ${opt[t]} ]]
    then
        # -t was specified, which probably means a subset of $src is being
        # decrypted.
        if [[ $src == "${opt[t]}"* ]]
        then
            src_prefix_len=${#opt[t]}
        else
            echo "If option \"-t\" (\"${opt[t]}\") is specified then it must \
be a prefix of the source directory (\"$src\")." 2>&2
            exit 1
        fi
    fi
fi

# Create a temporary directory
if ! mkdir -m 700 "$tmp_dir"
then
    echo "Could not create temporary directory \"$tmp_dir\"." 2>&2
    exit 1
fi
trap cleanup EXIT

# Incremented for each error found.
errors=0

if ! find "${src_tops_ar[@]}" > "$src_list_file"
then
    echo "Error finding source top files in  \"${src_tops_ar[*]}\"." 1>&2
    (( ++errors ))
fi

if [[ -n ${opt[x]} ]]
then
    # Keep track of the relative paths.
    unset rel_paths_as
    declare -A rel_paths_as
fi

if [[ -n ${opt[d]} ]]
then
    action="dec"
else
    action="enc"
fi

if [[ -n ${opt[v]} ]]
then
    echo "Action                : $action"
    echo "Source tops           : ${src_tops_ar[*]}"
    echo "Destination directory : $dst"
fi

while read -r src_file
do
    if [[ $src_file != /* ]]
    then
        echo "Source file \"$src_file\" does not start with \"/\". \
Ignoring." 1>&2
        (( ++errors ))
    fi

    # Get rid of the tailing slash, if any.
    if [[ $src_file == */ ]]
    then
        src_file="${src_file:0:-1}"
    fi

    if [[ -n ${opt[r]} ]]
    then
        # Remove leading slash.
        src_file_rel="${src_file:1}"
    else
        # Remove the common source prefix and then +1 for the leading slash.
        src_file_rel="${src_file:$src_prefix_len+1}"
    fi
    # Get rid of the tailing slash, if any.
    if [[ $src_file_rel == */ ]]
    then
        src_file_rel="${src_file_rel:0:-1}"
    fi

    # Use the relative path of the file as part of the password.
    echo "${conf[pass]}|$src_file_rel" > "$pass_file"

    # The fully qualified destination path.
    dst_file="$dst/$src_file_rel"

    if [[ -d $src_file ]]
    then
        # A directory.
        if [[ -n ${opt[v]} ]]
        then
            echo "dir \"$dst_file\""
        fi
        if mkdir -p "$dst_file"
        then
            if [[ (-n ${opt[x]}) && (-n $src_file_rel) ]]
            then
                rel_paths_as["$src_file_rel"]="d"
            fi
        else
            echo "Could not make directory \"$dst_file\"." 1>&2
            (( ++errors ))
        fi
    elif [[ -f $src_file ]]
    then
        # An ordinary file.
        if [[ (-n ${opt[u]}) && ! ($src_file -nt $dst_file) ]]
        then
            if [[ -n ${opt[v]} ]]
            then
                echo "old \"$src_file\""
            fi
            if [[ -n ${opt[x]} ]]
            then
                rel_paths_as["$src_file_rel"]="f"
            fi
            continue
        fi
        if [[ -n ${opt[v]} ]]
        then
            echo "$action \"$src_file\" -> \"$dst_file\""
        fi

        if [[ -n ${opt[d]} ]]
        then
            # Decrypt
            hdr=$(head -c 32 "$src_file")
            read -ra hdr_ar <<< "$hdr"
        
            # The first two tokens should be fixed.
            if [[ ${#hdr_ar[@]} -lt 2 ]]
            then
                echo "Invalid header \"$hdr\" for source file \
\"$src_file\"." 1>&2
                (( ++errors ))
                continue
            fi
            if [[ ${hdr_ar[0]} != efs ]]
            then
                echo "Unknown file type \"${hdr_ar[0]}\" in header \"$hdr\" \
for source file \"$src_file\"." 1>&2
                (( ++errors ))
                continue
            fi
            if [[ ${hdr_ar[1]} != 1 ]]
            then
                echo "Unknown version \"${hdr_ar[1]}\" in header \"$hdr\" for \
source file \"$src_file\"." 1>&2
                (( ++errors ))
                continue
            fi
            calg="${hdr_ar[2]}"

            # Process the header options.
            do_nosalt=""
            for (( i=3; i<${#hdr_ar[@]}; i++ ))
            do
                hopt="${hdr_ar[i]}"
                case "$hopt" in
                    ns)
                        do_nosalt="t"
                        ;;
                    *)
                        echo "Unknown header option \"$hopt\". Ignoring." 1>&2
                        (( ++errors ))
                        ;;
                esac
            done

            if ! tail -c +33 "$src_file" | openssl "$calg" -d \
                ${do_nosalt:+-nosalt} -pass "file:$pass_file" -out "$dst_file"
            then
                echo "Could not decrypt \"$src_file\" to \"$dst_file\"." 1>&2
                rm -f "$dst_file"
                (( ++errors ))
                continue
            fi
            tail -c 32 "$dst_file" > "$hash_expected_file"
            truncate -cs -32 "$dst_file"
            openssl dgst -sha256 -binary -out "$hash_actual_file" "$dst_file"
            if diff -q "$hash_actual_file" "$hash_expected_file" &> /dev/null
            then
                if [[ -n ${opt[x]} ]]
                then
                    rel_paths_as["$src_file_rel"]="f"
                fi
            else
                echo "For \"$dst_file\" the hash did not match." 1>&2
                rm -f "$dst_file"
                (( ++errors ))
            fi
        else
            # Encrypt
            alg="${conf[algDefault]}"
            if [[ -n ${conf[lowFiles]} ]]
            then
                for low_file in ${conf[lowFiles]}
                do
                    # $low_file actually does have wild cards to be matched.
                    # shellcheck disable=SC2053
                    if [[ $src_file_rel == $low_file ]]
                    then
                        alg="${conf[algLow]}"
                    fi
                done
            fi
            printf "%-31s\\n" "efs 1 $alg ${conf[noSalt]:+ns}" > \
                "$dst_file"
            openssl dgst -sha256 -binary -out "$hash_actual_file" "$src_file"
            if cat "$src_file" "$hash_actual_file" | openssl "$alg" \
                ${conf[noSalt]:+-nosalt} -pass "file:$pass_file" >> "$dst_file"
            then
                if [[ -n ${opt[x]} ]]
                then
                    rel_paths_as["$src_file_rel"]="f"
                fi
            else
                echo "Could not encrypt \"$src_file\" to \"$dst_file\"." 1>&2
                rm -f "$dst_file"
                (( ++errors ))
            fi
        fi
    else
        echo "Source file \"$src_file\" is not a file or directory. \
Ignoring." 1>&2
        (( ++errors ))
    fi
done < "$src_list_file"

if [[ -n ${opt[x]} ]]
then
    # tac so that parents are last so deletes work.
    if ! find "$dst" | tac > "$dst_list_file"
    then
        echo "Error finding destination files in \"$dst\"." 1>&2
        (( ++errors ))
    fi

    while read -r dst_file
    do
        # Remove the common source prefix and then +1 for the leading slash.
        dst_file_rel="${dst_file:${#dst}+1}"
        if [[ ((-n ${opt[r]}) && (${#dst_file_rel}+1 -lt ${#dst})) \
            || (-z $dst_file_rel) ]]
        then
            continue
        fi
        if [[ ! -v rel_paths_as[$dst_file_rel] ]]
        then
            if [[ -d $dst_file ]]
            then
                if rmdir --ignore-fail-on-non-empty "$dst_file"
                then
                    if [[ (-n ${opt[v]}) && ! (-d $dst_file) ]]
                    then
                        echo "del \"$dst_file\""
                    fi
                else
                    echo "Unable to remove extraneous directory \"$dst_file\"." 1>&2
                    (( ++errors ))
                fi
            elif [[ -f $dst_file ]]
            then
                if rm -f "$dst_file"
                then
                    if [[ -n ${opt[v]} ]]
                    then
                        echo "del \"$dst_file\""
                    fi
                else
                    echo "Unable to remove extraneous file \"$dst_file\"." 1>&2
                    (( ++errors ))
                fi
            else
                echo "Unable to remove extraneous unknown \"$dst_file\"." 1>&2
                (( ++errors ))
            fi
        fi
    done < "$dst_list_file"
fi

if [[ $errors -gt 0 ]]
then
    echo "$errors errors." 1>&2
    exit 1
else
    if [[ -n ${opt[v]} ]]
    then
      echo "Success."
    fi
    exit 0
fi
