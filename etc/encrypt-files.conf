# The configuration file for encrypt-files.

# The prefix to the password used for encryption for each file. In this example
# 45 random [0-9][A-Z][a-z] characters are used resulting in 62^45
# possibilities. 43 or more such characters should be enough to match the
# amount of entropy in the 32 byte AES key that's derived from it. You MUST
# CHANGE this value in order to be secure.
pass=iO0p9ivpEiG64ssEwWDfEusJB2mmHXhBMBWXYGT4c52pG

# The default encryption algorithm to use. aes-256-cbc causes every block
# following a modification to be changed. It's quite secure at the cost of a
# larger rsync.
algDefault=aes-256-cbc

# A less secure encryption algorithm that can be used for less sensitive files.
# There's an efficiency gain for using it with large files that have small
# isolated changes since for each change to the plain text only the
# corresponding bits in the cipher text are changed. When this is used an
# attacker can XOR two versions of the cipher text for the same file to
# get the XOR for the corresponding versions of the plain text. In other words,
# an attacker can see which bits were flipped in every revision.
algLow=aes-256-ofb

# A space separated list of files that are to use encryption-low.
lowFiles=*/Public/* */.minecraft/saves/*

# Pass "-nosalt" to OpenSSL. This make rsync'ing the files to a remote
# location slightly more efficient by reducing the number of bits in the
# cipher text impacted by a small change in the plain text. The usual reason
# for having salt doesn't apply if a long random "pass" is used. Admittedly
# without salt an attacker could determine the first block modified by a change
# (in the case of aes-256-cbc), but that doesn't seem very helpful.
noSalt=t
